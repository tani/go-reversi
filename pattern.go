package main

import "math/bits"

const Diag4 = 0 |
	uint64(0b00010000<<(8*7)) |
	uint64(0b00100000<<(8*6)) |
	uint64(0b01000000<<(8*5)) |
	uint64(0b10000000<<(8*4)) |
	uint64(0b00000000<<(8*3)) |
	uint64(0b00000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Diag5 = 0 |
	uint64(0b00001000<<(8*7)) |
	uint64(0b00010000<<(8*6)) |
	uint64(0b00100000<<(8*5)) |
	uint64(0b01000000<<(8*4)) |
	uint64(0b10000000<<(8*3)) |
	uint64(0b00000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Diag6 = 0 |
	uint64(0b00000100<<(8*7)) |
	uint64(0b00001000<<(8*6)) |
	uint64(0b00010000<<(8*5)) |
	uint64(0b00100000<<(8*4)) |
	uint64(0b01000000<<(8*3)) |
	uint64(0b10000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Diag7 = 0 |
	uint64(0b00000010<<(8*7)) |
	uint64(0b00000100<<(8*6)) |
	uint64(0b00001000<<(8*5)) |
	uint64(0b00010000<<(8*4)) |
	uint64(0b00100000<<(8*3)) |
	uint64(0b01000000<<(8*2)) |
	uint64(0b10000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Diag8 = 0 |
	uint64(0b00000001<<(8*7)) |
	uint64(0b00000010<<(8*6)) |
	uint64(0b00000100<<(8*5)) |
	uint64(0b00001000<<(8*4)) |
	uint64(0b00010000<<(8*3)) |
	uint64(0b00100000<<(8*2)) |
	uint64(0b01000000<<(8*1)) |
	uint64(0b10000000<<(8*0))

const Hol2 = 0 |
	uint64(0b00000000<<(8*7)) |
	uint64(0b11111111<<(8*6)) |
	uint64(0b00000000<<(8*5)) |
	uint64(0b00000000<<(8*4)) |
	uint64(0b00000000<<(8*3)) |
	uint64(0b00000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Hol3 = 0 |
	uint64(0b00000000<<(8*7)) |
	uint64(0b00000000<<(8*6)) |
	uint64(0b11111111<<(8*5)) |
	uint64(0b00000000<<(8*4)) |
	uint64(0b00000000<<(8*3)) |
	uint64(0b00000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Hol4 = 0 |
	uint64(0b00000000<<(8*7)) |
	uint64(0b00000000<<(8*6)) |
	uint64(0b00000000<<(8*5)) |
	uint64(0b11111111<<(8*4)) |
	uint64(0b00000000<<(8*3)) |
	uint64(0b00000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Edg10 = 0 |
	uint64(0b11111111<<(8*7)) |
	uint64(0b01000010<<(8*6)) |
	uint64(0b00000000<<(8*5)) |
	uint64(0b00000000<<(8*4)) |
	uint64(0b00000000<<(8*3)) |
	uint64(0b00000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Cor2x1 = 0 |
	uint64(0b11000000<<(8*7)) |
	uint64(0b00000000<<(8*6)) |
	uint64(0b00000000<<(8*5)) |
	uint64(0b00000000<<(8*4)) |
	uint64(0b00000000<<(8*3)) |
	uint64(0b00000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Cor1x2 = 0 |
	uint64(0b10000000<<(8*7)) |
	uint64(0b10000000<<(8*6)) |
	uint64(0b00000000<<(8*5)) |
	uint64(0b00000000<<(8*4)) |
	uint64(0b00000000<<(8*3)) |
	uint64(0b00000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Cor3x3 = 0 |
	uint64(0b11100000<<(8*7)) |
	uint64(0b11100000<<(8*6)) |
	uint64(0b11100000<<(8*5)) |
	uint64(0b00000000<<(8*4)) |
	uint64(0b00000000<<(8*3)) |
	uint64(0b00000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

const Null = 0 |
	uint64(0b00000000<<(8*7)) |
	uint64(0b00000000<<(8*6)) |
	uint64(0b00000000<<(8*5)) |
	uint64(0b00000000<<(8*4)) |
	uint64(0b00000000<<(8*3)) |
	uint64(0b00000000<<(8*2)) |
	uint64(0b00000000<<(8*1)) |
	uint64(0b00000000<<(8*0))

func PatternCount(board uint64) int {
	c := 0
	for i := 0; i < 4; i++ {
		c += IfThenElse(board&Diag4 == Diag4, 1, 0)
		c += IfThenElse(board&Diag5 == Diag5, 1, 0)
		c += IfThenElse(board&Diag6 == Diag6, 1, 0)
		c += IfThenElse(board&Diag7 == Diag7, 1, 0)
		c += IfThenElse(board&Diag8 == Diag8, 1, 0)
		c += IfThenElse(board&Hol2 == Hol2, 1, 0)
		c += IfThenElse(board&Hol3 == Hol3, 1, 0)
		c += IfThenElse(board&Hol4 == Hol4, 1, 0)
		c += IfThenElse(board&Edg10 == Edg10, 1, 0)
		c += IfThenElse(board&Cor2x1 == Cor2x1, 1, 0)
		c += IfThenElse(board&Cor1x2 == Cor1x2, 1, 0)
		c += IfThenElse(board&Cor3x3 == Cor3x3, 1, 0)
		board = bits.Reverse64(bits.ReverseBytes64(board))
	}
	return c
}
